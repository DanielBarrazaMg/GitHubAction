# Nombre del flujo de trabajo
name: API

# Eventos que activarán este flujo de trabajo
on:
  # Ejecutar el flujo de trabajo manualmente desde la interfaz de usuario de GitHub
  workflow_dispatch:
  # Ejecutar el flujo de trabajo cuando se realice un push a la rama main en el repositorio
  push:
    branches:
      - main
    # Especificar los archivos o carpetas que deben cambiar para activar el flujo
    paths:
      - 'Backend/**'
  
# Definición de los trabajos que se ejecutarán como parte de este flujo de trabajo
jobs:
  # Definir un trabajo llamado "build"
  build:
    # Especificar en qué tipo de entorno se ejecutará este trabajo
    runs-on: ubuntu-latest

    # Pasos que se ejecutarán como parte de este trabajo
    steps:
      # Paso 1: Obtener el código fuente del repositorio
      - uses: actions/checkout@v3

      # Paso 2: Iniciar sesión en Azure
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Paso 3: Obtener la fecha y hora actual para etiquetar el contenedor
      - name: Get DateTime as tag for the container
        id: get_datetime
        run: |
          current_timestamp=$(date +%s)
          formatted_datetime=$(date -u -d "@${current_timestamp}" +"%Y%m%d%H%M%S")
          echo "::set-output name=formatted_datetime::$formatted_datetime"

      # Paso 4: Construir la aplicación del contenedor y enviarla al Azure Container Registry (ACR)
      - name: Build the container App and push it to the ACR 
        uses: azure/container-apps-deploy-action@v1 
        with: 
          appSourcePath: ${{ github.workspace }}/Backend
          dockerfilePath: Backend.Functions/Dockerfile
          acrName: acrgithubdbarraza
          acrUsername: acrgithubdbarraza
          acrPassword: edLefK18QzoQAsIHHwNB5JxOGjvCIiqdEmpsye/Nlt+ACRDEBWwD
          containerAppName: aca-api-githubdbarraza
          imageToBuild: acrgithubdbarraza.azurecr.io/poc-ai-api:latest
          resourceGroup: RgGitHubAction

